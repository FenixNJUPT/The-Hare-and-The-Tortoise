C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SNAKE
OBJECT MODULE PLACED IN .\Objects\snake.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE USER\snake.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Drivers;.\USER) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\snake.lst) TABS(2) OBJECT(.\Objects\snake.obj)

line level    source

   1          ///*********************************************************************
   2          //      贪吃蛇源码snake.c
   3          //**********************************************************************/
   4          //#include "config.h"
   5          //static struct Food
   6          //{
   7          //  unsigned char x;  // 食物的横坐标
   8          //  unsigned char y;  // 食物的纵坐标
   9          ////  unsigned char yes;
  10          //}food;  // 食物结构体
  11          
  12          //struct Snake
  13          //{
  14          //  char x[SNAKE_Max_Long];
  15          //  char y[SNAKE_Max_Long];
  16          //  unsigned char Long;   // 蛇的长度
  17          //  unsigned char Life;   // 蛇的生命
  18          ////  unsigned char Score;  // 蛇的分数，本例中没使用
  19          //  unsigned char Level;  // 蛇的等级
  20          //  unsigned char Dir;    // 蛇移动方向
  21          //}snake; // 蛇结构体
  22          ////****************************************//
  23          
  24          //enum Dir{up, down, left, right}; //方向枚举
  25          
  26          
  27          ////***********变量声明***************//
  28          //unsigned char DispRAM[8]={0}; // 蛇坐标缓存
  29          //unsigned char tCount;
  30          //unsigned char keyValue=right;
  31          //unsigned char speedLevel=25;
  32          //extern uchar keyVal; // 来源于key.c
  33          ////**********************************//
  34          
  35          
  36          //// 用此函数来产生食物最好使蛇的长度不要那么长，蛇越长，点越难找，递归越深
  37          //static void createFood()
  38          //{
  39          //  unsigned char i;
  40          //  food.x = rand()%WIDTH;
  41          //  food.y = rand()%LENGTH;
  42          //  for(i=0; i<snake.Long; i++)
  43          //  {
  44          //    if(food.x==snake.x[i] && food.y==snake.y[i])
  45          //    createFood(); 
  46          //  }
  47          //}
  48          
  49          ////****************初始化蛇的位置等***********************//
  50          //static void initSnake()
  51          //{
  52          //  //********清除内存数据**********//
  53          //  unsigned char i;
  54          //  for(i=0; i<SNAKE_Max_Long; i++)
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 2   

  55          //  {
  56          //    snake.x[i]=-1;
  57          //    snake.y[i]=-1;
  58          //  }
  59          //  
  60          //  //********初始化蛇参数**********//
  61          //  snake.Long=2; // 初始化蛇的长度为两节
  62          //  snake.Life=1; //初始化蛇活着
  63          //  snake.Dir=right;
  64          //  snake.x[1]=0;
  65          //  snake.y[1]=2;
  66          //  snake.x[0]=1;
  67          //  snake.y[0]=2;
  68          //  createFood();
  69          //}
  70          
  71          ////********************刷新界面*******************//
  72          //static void drawSnake()
  73          //{
  74          //  unsigned char i=0;
  75          //  for(i=0; i<8; i++) DispRAM[i]=0;
  76          //  for(i=0; i<snake.Long; i++)
  77          //    DispRAM[snake.y[i]] |= 1<<snake.x[i];
  78          //  scanDisplay(DispRAM);
  79          //  drawPoint(food.x, food.y);
  80          //}
  81          
  82          ////********************蛇运动坐标刷新*******************//
  83          //static void runSnake()
  84          //{
  85          //  unsigned char i;
  86          //  
  87          //  // 蛇身体坐标移动，蛇头方向坐标逐渐向蛇尾方向移动
  88          //  for(i=snake.Long; i>0; i--)
  89          //  { 
  90          //    snake.y[i]=snake.y[i-1];
  91          //    snake.x[i]=snake.x[i-1];
  92          //  }
  93          //  
  94          //  // 重新获得蛇的头部位置
  95          //  switch(snake.Dir)
  96          //  { 
  97          //    case up:  snake.y[0]-=1; break;
  98          //    case down:  snake.y[0]+=1; break;
  99          //    case left:  snake.x[0]-=1; break;
 100          //    case right: snake.x[0]+=1; break;
 101          //    default: break;
 102          //  }
 103          //  
 104          //  // 蛇吃到食物
 105          //  if(snake.x[0]==food.x && snake.y[0]==food.y)
 106          //  {
 107          //    snake.Long++;
 108          //    createFood();
 109          //  }
 110          //  
 111          
 112          //}
 113          
 114          ////*******************方向按键处理***********************//
 115          //static void changeDir(unsigned char key)
 116          //{
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 3   

 117          //  // 方向按键的规则
 118          //  switch(key)
 119          //  {
 120          //    case up:  if(snake.Dir != down) snake.Dir=up;     break;
 121          //    case down:  if(snake.Dir != up)   snake.Dir=down;   break;
 122          //    case left:  if(snake.Dir != right)  snake.Dir=left;   break;
 123          //    case right: if(snake.Dir != left)   snake.Dir=right;  break;
 124          //    default: break;
 125          //  }
 126          //}
 127          
 128          ////********************启动贪吃蛇游戏（主函数）*********************//
 129          //void startSnake()
 130          //{
 131          //  uchar i=0;
 132          //  initSnake();
 133          //  while(snake.Life)
 134          //  {
 135          //    changeDir(keyValue);
 136          //    
 137          //    // 蛇运行的速度，由speedLevel决定
 138          //    if(tCount >= speedLevel)
 139          //    {
 140          //      tCount=0;
 141          //      runSnake();
 142          //    }
 143          //      
 144          //    //**********************蛇之dead***************************//
 145          //    // 限定蛇活动范围，超范围就dead
 146          //    if((snake.x[0]>(WIDTH-1)) || (snake.x[0]<0) || (snake.y[0]>(LENGTH-1)) || (snake.y[0]<0))
 147          //    {
 148          //      snake.Life=0; 
 149          //      snake.Level=1;
 150          //      speedLevel=25;
 151          //      keyVal=right; 
 152          //    }
 153          //    // 蛇自杀检测
 154          //    for(i=4; i<=snake.Long; i++)
 155          //    {
 156          //      if(snake.x[i-1]==snake.x[0] && snake.y[i-1]==snake.y[0])
 157          //      {
 158          //        snake.Life=0;
 159          //        snake.Level=1;
 160          //        speedLevel=25;
 161          //        keyVal=right; 
 162          //      }
 163          //    }
 164          //    //***********************************************************//
 165          //    
 166          //    // 等级越高速度越快
 167          //    if(snake.Long >= SNAKE_Max_Long)
 168          //    {
 169          //      delayMs(500); // 延一下时
 170          //      initSnake();
 171          //      speedLevel-=5;
 172          //      keyVal=right;     
 173          //      if(++snake.Level > 5)
 174          //      {
 175          //        // 大神，你已经打爆机了，现在从头再来。。。
 176          //        snake.Level=1;
 177          //        speedLevel=25;            
 178          //      }
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 4   

 179          //      tCount=0;
 180          //    }
 181          //    drawSnake();
 182          //  }
 183          //}
 184          
 185          /*
 186          rabbit 012
 187                 543
 188          */
 189          #include "config.h"
 190          struct Rabbit
 191          {
 192            char x[6];
 193            char y[6];
 194            int Score;  // 兔子的分数
 195            unsigned char Speed;  // 兔子的速度
 196          }rabbit;  // 兔子结构体
 197          
 198          struct Tor
 199          {
 200            char x[6];
 201            char y[6];
 202            int Score;  // 乌龟的分数
 203            unsigned char Speed;  // 乌龟的速度
 204          }tor; // 乌龟结构体
 205          
 206          static struct Barrier
 207          {
 208            char x[3];  // 障碍物的横坐标
 209            char y; // 障碍物的纵坐标
 210          //  unsigned char yes;
 211          }barrier; // 障碍物结构体
 212          
 213          
 214          enum Dir{ speedup1, speeddown1, left1, right1, speedup2, speeddown2, left2, right2, nothing}; //方向枚举
 215          
 216          
 217          //***********变量声明***************//
 218          unsigned char DispRAM[8]={0}; // 坐标缓存
 219          unsigned char DisplayData[8]={0};
 220          unsigned char code smgduan[11]={0x03,0x9f,0x25,0x0d,0x99,0x49,0x41,0x1f,0x01,0x09,0x31};//显示0~F的值
 221          unsigned char code smgduandot[10]={0x02,0x9e,0x24,0x0c,0x98,0x48,0x40,0x1e,0x00,0x08,};//显示0~F的值
 222          unsigned char tCount=0;
 223          unsigned char keyValue;
 224          unsigned char speedLevel=25;
 225          unsigned char skillflag=0,skillflag2=0,v=0;
 226          extern uchar keyVal; // 来源于key.c
 227          extern unsigned int sec;
 228          //**********************************//
 229          void createBarrier()
 230          {
 231   1        unsigned char mod;
 232   1        if(sec/10==0)
 233   1          mod=0;
 234   1        else if(sec/10==1)
 235   1          mod=1;
 236   1        else
 237   1          mod=2;
 238   1        switch(mod)
 239   1        {
 240   2          case 0:
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 5   

 241   2          barrier.x[0] = rand()%(WIDTH);
 242   2          barrier.x[1] = barrier.x[0];
 243   2          barrier.x[2] = barrier.x[0];
 244   2          barrier.y = WIDTH-1;
 245   2          break;
 246   2          case 1:
 247   2          barrier.x[0] = rand()%(WIDTH-1);
 248   2          barrier.x[1] = barrier.x[0]+1;
 249   2          barrier.x[2] = barrier.x[0];
 250   2          barrier.y = WIDTH-1;
 251   2          break;
 252   2          case 2:
 253   2          barrier.x[0] = rand()%(WIDTH-2);
 254   2          barrier.x[1] = barrier.x[0]+1;
 255   2          barrier.x[2] = barrier.x[0]+2;
 256   2          barrier.y = WIDTH-1;
 257   2          break;
 258   2        }
 259   1      }
 260          
 261          //****************初始化兔子的位置等***********************//
 262          static void initRabbit()
 263          {
 264   1        //********初始化兔子参数**********//
 265   1        rabbit.y[0]=1;
 266   1        rabbit.y[1]=1;
 267   1        rabbit.y[2]=1;
 268   1        rabbit.y[3]=0;
 269   1        rabbit.y[4]=0;
 270   1        rabbit.y[5]=0;
 271   1        
 272   1        rabbit.x[0]=1;
 273   1        rabbit.x[1]=2;
 274   1        rabbit.x[2]=3;
 275   1        rabbit.x[3]=3;
 276   1        rabbit.x[4]=2;
 277   1        rabbit.x[5]=1;
 278   1        rabbit.Score=0;
 279   1        createBarrier();
 280   1      }
 281          
 282          static void initTor()
 283          {
 284   1        //********初始化tor参数**********//
 285   1        tor.y[0]=2;
 286   1        tor.y[1]=2;
 287   1        tor.y[2]=1;
 288   1        tor.y[3]=1;
 289   1        tor.y[4]=0;
 290   1        tor.y[5]=0;
 291   1        
 292   1        tor.x[0]=5;
 293   1        tor.x[1]=6;
 294   1        tor.x[2]=5;
 295   1        tor.x[3]=6;
 296   1        tor.x[4]=5;
 297   1        tor.x[5]=6;
 298   1        tor.Score=0;
 299   1        createBarrier();
 300   1      }
 301          
 302          //********************刷新界面*******************//
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 6   

 303          static void drawRabbit()
 304          {
 305   1        unsigned char i,j;
 306   1        for(i=0; i<8; i++) 
 307   1          DispRAM[i]=0;
 308   1        for(j=0; j<6; j++)
 309   1          DispRAM[rabbit.x[j]] |= 1<<rabbit.y[j];
 310   1        for(j=0;j<3;j++)
 311   1          DispRAM[barrier.x[j]] |= 1<<barrier.y;
 312   1        scanDisplay(DispRAM);
 313   1      }
 314          
 315          static void drawTor()
 316          {
 317   1        unsigned char i,j;
 318   1        for(i=0; i<8; i++) 
 319   1          DispRAM[i]=0;
 320   1        for(j=0; j<6; j++)
 321   1          DispRAM[tor.x[j]] |= 1<<tor.y[j];
 322   1        for(j=0;j<3;j++)
 323   1          DispRAM[barrier.x[j]] |= 1<<barrier.y;
 324   1        scanDisplay(DispRAM);
 325   1      }
 326          
 327          //********************运动坐标刷新*******************//
 328          static void runRabbit()
 329          {
 330   1        rabbit.x[0]=rabbit.x[1]-1;
 331   1        rabbit.x[2]=rabbit.x[1]+1;
 332   1        rabbit.x[5]=rabbit.x[1]-1;
 333   1        rabbit.x[4]=rabbit.x[1];
 334   1        rabbit.x[3]=rabbit.x[1]+1;
 335   1      }
 336          
 337          static void runTor()
 338          {
 339   1        if(skillflag==0)
 340   1        {
 341   2          tor.x[0]=tor.x[1]-1;
 342   2          tor.x[2]=tor.x[1]-1;
 343   2          tor.x[3]=tor.x[1];
 344   2          tor.x[4]=tor.x[1]-1;
 345   2          tor.x[5]=tor.x[1];
 346   2          tor.y[0]=2;
 347   2          tor.y[2]=1;
 348   2          tor.y[3]=1;
 349   2          tor.y[4]=0;
 350   2          tor.y[5]=0;
 351   2        }
 352   1        else
 353   1        {
 354   2          tor.x[0]=tor.x[1];
 355   2          tor.x[2]=tor.x[1];
 356   2          tor.x[3]=tor.x[1];
 357   2          tor.x[4]=tor.x[1];
 358   2          tor.x[5]=tor.x[1];
 359   2          tor.y[0]=3;
 360   2          tor.y[2]=3;
 361   2          tor.y[3]=1;
 362   2          tor.y[4]=0;
 363   2          tor.y[5]=0;
 364   2        }
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 7   

 365   1      }
 366          
 367          
 368          //*******************方向按键处理***********************//
 369          static void changeDir(unsigned char key)
 370          {
 371   1        static unsigned char temp,tempskill;
 372   1        // 方向按键的规则
 373   1        if(temp!=key)
 374   1        { 
 375   2        switch(key)
 376   2        {
 377   3          case speedup1:  
 378   3            speedLevel--; break;
 379   3          case speeddown1:    
 380   3            speedLevel++; 
 381   3            if((tempskill==speedup1)&&(v<5))
 382   3            {
 383   4              skillflag2=1;
 384   4              v++;
 385   4            }
 386   3            break;
 387   3          case left1:   
 388   3            rabbit.x[1]=rabbit.x[1]-1;  break;
 389   3          case right1: 
 390   3            rabbit.x[1]=rabbit.x[1]+1;  break;
 391   3          case speedup2:  
 392   3            speedLevel--; break;
 393   3          case speeddown2:    
 394   3            speedLevel++; 
 395   3            if(tempskill==speedup2)
 396   3              skillflag=~skillflag;
 397   3            break;
 398   3          case left2:   
 399   3            tor.x[1]=tor.x[1]-1;  break;
 400   3          case right2: 
 401   3            tor.x[1]=tor.x[1]+1;  break;
 402   3          case nothing:
 403   3            if(temp!=nothing)
 404   3              tempskill=temp;
 405   3            break;
 406   3          default: break;
 407   3        }
 408   2        temp=key;
 409   2        }
 410   1      }
 411          
 412          //********************启动游戏（主函数）*********************//
 413          void startRabbit()
 414          {
 415   1        uchar i,j;
 416   1        uint soc=0;
 417   1        initRabbit();
 418   1        while(1)
 419   1        {
 420   2          if(sec>29)
 421   2            TR0=0;
 422   2          changeDir(keyValue);
 423   2          runRabbit();
 424   2          if(barrier.y<0)
 425   2          {
 426   3            createBarrier();
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 8   

 427   3          }
 428   2          // 障碍物运行的速度，由speedLevel决定
 429   2          if(tCount >= speedLevel)
 430   2          {
 431   3            tCount=0;
 432   3            barrier.y--;
 433   3            soc++;
 434   3            if(soc>4)
 435   3              {
 436   4                soc=0;
 437   4                rabbit.Score++;
 438   4              }
 439   3          }
 440   2            
 441   2          //**********************触碰边线及障碍物***************************//
 442   2          // 限定兔子活动范围
 443   2          if(rabbit.x[1]>(WIDTH-2))
 444   2          {
 445   3            rabbit.Score=rabbit.Score-3;
 446   3            rabbit.x[1]=rabbit.x[1]-1;
 447   3          }
 448   2          else if(rabbit.x[1]<1)
 449   2          {
 450   3            rabbit.Score=rabbit.Score-3;
 451   3            rabbit.x[1]=rabbit.x[1]+1;
 452   3          }
 453   2          // 触及障碍物
 454   2          for(i=0; i<6; i++)
 455   2          {
 456   3            for(j=0;j<3;j++)
 457   3            {
 458   4               if(barrier.x[j]==rabbit.x[i] && barrier.y==rabbit.y[i])
 459   4               {
 460   5                 if(skillflag2==0)
 461   5                   rabbit.Score=rabbit.Score-3;
 462   5                 else
 463   5                   skillflag2=0;
 464   5                 createBarrier();
 465   5               }
 466   4            }
 467   3          }
 468   2          if(rabbit.Score<0)
 469   2            rabbit.Score=0;
 470   2          if(sec%10==0&&sec<30)
 471   2          {
 472   3            DisplayData[1]=smgduan[10];
 473   3            DisplayData[0]=smgduan[sec/10+1];
 474   3          }
 475   2          else
 476   2          {
 477   3            DisplayData[0]=smgduan[rabbit.Score%10];
 478   3            DisplayData[1]=smgduan[rabbit.Score/10];
 479   3          }
 480   2          drawRabbit();
 481   2        }
 482   1      }
 483          
 484          
 485          
 486          /********************************************************************************************
 487          ********************************************************************************************/
 488          
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 9   

 489          
 490          
 491          void startTor()
 492          {
 493   1        uchar i,j;
 494   1        uint soc=0;
 495   1        initTor();
 496   1        while(1)
 497   1        {
 498   2          if(sec>29)
 499   2            TR0=0;
 500   2          changeDir(keyValue);
 501   2          runTor();
 502   2          if(barrier.y<0)
 503   2          {
 504   3            createBarrier();
 505   3          }
 506   2          // 障碍物运行的速度，由speedLevel决定
 507   2          if(tCount >= speedLevel)
 508   2          {
 509   3            tCount=0;
 510   3            barrier.y--;
 511   3            soc++;
 512   3            if(soc>4)
 513   3              {
 514   4                soc=0;
 515   4                tor.Score++;
 516   4              }
 517   3          }
 518   2            
 519   2          //**********************触碰边线及障碍物***************************//
 520   2          // 限定乌龟活动范围
 521   2          if(tor.x[1]>(WIDTH-1))
 522   2          {
 523   3            tor.Score=tor.Score-3;
 524   3            tor.x[1]=tor.x[1]-1;
 525   3          }
 526   2          else if(((tor.x[1]<1)&&(skillflag==0))||((tor.x[1]<0)&&(skillflag==1)))
 527   2          {
 528   3            tor.Score=tor.Score-3;
 529   3            tor.x[1]=tor.x[1]+1;
 530   3          }
 531   2          // 触及障碍物
 532   2          for(i=0; i<6; i++)
 533   2          {
 534   3            for(j=0;j<3;j++)
 535   3            {
 536   4               if(barrier.x[j]==tor.x[i] && barrier.y==tor.y[i])
 537   4               {
 538   5                 tor.Score=tor.Score-3;    
 539   5                 createBarrier();
 540   5               }
 541   4            }
 542   3          }
 543   2          if(tor.Score<0)
 544   2            tor.Score=0;
 545   2          if(sec%10==0&&sec<30)
 546   2          {
 547   3            DisplayData[3]=smgduan[10];
 548   3            DisplayData[2]=smgduandot[sec/10+1];
 549   3          }
 550   2          else
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 10  

 551   2          {
 552   3            DisplayData[2]=smgduandot[tor.Score%10];
 553   3            DisplayData[3]=smgduan[tor.Score/10];
 554   3          }
 555   2          drawTor();
 556   2        }
 557   1      }
 558          
 559          
 560          /***********************************************************************************************
 561          ************************************************************************************************/
 562          
 563          
 564          void startDuel()
 565          {
 566   1        uchar i,j;
 567   1        uint soc=0;
 568   1        initRabbit();
 569   1        initTor();
 570   1        while(1)
 571   1        {
 572   2          if(sec>29)
 573   2            TR0=0;
 574   2          changeDir(keyValue);
 575   2          runRabbit();
 576   2          runTor();
 577   2          if(barrier.y<0)
 578   2          {
 579   3            createBarrier();
 580   3          }
 581   2          // 障碍物运行的速度，由speedLevel决定
 582   2          if(tCount >= speedLevel)
 583   2          {
 584   3            tCount=0;
 585   3            barrier.y--;
 586   3            soc++;
 587   3            if(soc>4)
 588   3              {
 589   4                soc=0;
 590   4                rabbit.Score++;
 591   4                tor.Score++;
 592   4              }
 593   3          }
 594   2            
 595   2          //**********************触碰边线及障碍物***************************//
 596   2          // 限定活动范围
 597   2          if(rabbit.x[1]>(WIDTH-2))
 598   2          {
 599   3            rabbit.Score=rabbit.Score-3;
 600   3            rabbit.x[1]=rabbit.x[1]-1;
 601   3          }
 602   2          else if(rabbit.x[1]<1)
 603   2          {
 604   3            rabbit.Score=rabbit.Score-3;
 605   3            rabbit.x[1]=rabbit.x[1]+1;
 606   3          }
 607   2          
 608   2          if(tor.x[1]>(WIDTH-1))
 609   2          {
 610   3            tor.Score=tor.Score-3;
 611   3            tor.x[1]=tor.x[1]-1;
 612   3          }
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 11  

 613   2          else if(((tor.x[1]<1)&&(skillflag==0))||((tor.x[1]<0)&&(skillflag==1)))
 614   2          {
 615   3            tor.Score=tor.Score-3;
 616   3            tor.x[1]=tor.x[1]+1;
 617   3          }
 618   2          
 619   2          // 触及障碍物
 620   2          for(i=0; i<6; i++)
 621   2          {
 622   3            for(j=0;j<3;j++)
 623   3            {
 624   4               if(barrier.x[j]==rabbit.x[i] && barrier.y==rabbit.y[i])
 625   4               {
 626   5                 if(skillflag2==0)
 627   5                   rabbit.Score=rabbit.Score-3;
 628   5                 else
 629   5                   skillflag2=0;           
 630   5                 createBarrier();
 631   5               }
 632   4            }
 633   3          }
 634   2          for(i=0; i<6; i++)
 635   2          {
 636   3            for(j=0;j<3;j++)
 637   3            {
 638   4               if(barrier.x[j]==tor.x[i] && barrier.y==tor.y[i])
 639   4               {
 640   5                 tor.Score=tor.Score-3;    
 641   5                 createBarrier();
 642   5               }
 643   4            }
 644   3          }
 645   2          if(rabbit.Score<0)
 646   2            rabbit.Score=0;
 647   2          if(tor.Score<0)
 648   2            tor.Score=0;
 649   2          if(sec%10==0&&sec<30)
 650   2          {
 651   3            DisplayData[3]=smgduan[10];
 652   3            DisplayData[2]=smgduandot[sec/10+1];
 653   3            DisplayData[1]=smgduan[10];
 654   3            DisplayData[0]=smgduan[sec/10+1];
 655   3          }
 656   2          else
 657   2          {
 658   3            DisplayData[0]=smgduan[rabbit.Score%10];
 659   3            DisplayData[1]=smgduan[rabbit.Score/10];
 660   3            DisplayData[2]=smgduandot[tor.Score%10];
 661   3            DisplayData[3]=smgduan[tor.Score/10];
 662   3          }
 663   2          drawRabbit();
 664   2          drawTor();
 665   2        }
 666   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1801    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58      13
C51 COMPILER V9.54   SNAKE                                                                 11/23/2019 11:41:55 PAGE 12  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
